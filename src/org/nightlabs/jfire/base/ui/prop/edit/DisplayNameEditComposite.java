/**
 * 
 */
package org.nightlabs.jfire.base.ui.prop.edit;

import org.eclipse.core.runtime.ListenerList;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.FocusAdapter;
import org.eclipse.swt.events.FocusEvent;
import org.eclipse.swt.events.ModifyEvent;
import org.eclipse.swt.events.ModifyListener;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.events.SelectionListener;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.nightlabs.base.ui.composite.LabeledText;
import org.nightlabs.base.ui.composite.XComposite;
import org.nightlabs.jfire.base.ui.resource.Messages;
import org.nightlabs.jfire.prop.PropertySet;
import org.nightlabs.jfire.prop.dao.StructLocalDAO;
import org.nightlabs.progress.NullProgressMonitor;

/**
 * Composite that can be used when the display name of a {@link PropertySet} should be edited.
 * Instantiate a new Composite and set the {@link PropertySet} whose display name it should
 * edit by {@link #setPropertySet(PropertySet)} or {@link #setPropertySet(PropertySet, boolean)}.
 * 
 * @author Alexander Bieber <!-- alex [AT] nightlabs [DOT] -->
 */
public class DisplayNameEditComposite extends XComposite {

	private LabeledText displayName;
	private Button autoCreateDisplayName;

	private PropertySet propertySet;
	
	private boolean updating = false;
	private boolean needsUpdate = false;
	
	// TODO: Think about listener for display-name changes, or maybe about 
	// unifying the listeners for PropertySetEditor-changes
	private ListenerList displayNameChangedListners = new ListenerList();
	
	/**
	 * Constructs a new {@link DisplayNameEditComposite}.
	 * 
	 * @param parent The parent of the Composite.
	 * @param style The style of the Composite.
	 */
	public DisplayNameEditComposite(Composite parent, int style) {
		super(parent, style, LayoutMode.TIGHT_WRAPPER, LayoutDataMode.NONE);
		displayName = new LabeledText(this, Messages.getString("org.nightlabs.jfire.base.ui.person.edit.blockbased.special.PersonPersonalDataWizardPage.displayName.caption")); //$NON-NLS-1$
		GridData displayNameGD = new GridData();
		displayNameGD.horizontalAlignment = GridData.FILL;
		displayNameGD.grabExcessHorizontalSpace = true;
		displayName.setLayoutData(displayNameGD);
		displayName.addModifyListener(new ModifyListener() {
			@Override
			public void modifyText(ModifyEvent e) {
				if (!updating) {
					needsUpdate = true;
				}
			}
		});
		displayName.addFocusListener(new FocusAdapter() {
			@Override
			public void focusLost(FocusEvent e) {
				if (needsUpdate) {
					updatePropertySet();
				}
			}
		});

		autoCreateDisplayName = new Button(this, SWT.CHECK);
		GridData autoCreateDisplayNameGD = new GridData();
		autoCreateDisplayName.setLayoutData(autoCreateDisplayNameGD);
		autoCreateDisplayName.setText(Messages.getString("org.nightlabs.jfire.base.ui.person.edit.blockbased.special.PersonPersonalDataWizardPage.autoCreateDisplayName.text")); //$NON-NLS-1$
		autoCreateDisplayName.addSelectionListener(
			new SelectionListener() {
				public void widgetSelected(SelectionEvent arg0) {
					displayName.getTextControl().setEnabled(!autoCreateDisplayName.getSelection());
					refresh();
				}
				public void widgetDefaultSelected(SelectionEvent arg0) {
				}
			}
		);
	}

	public void setPropertySet(PropertySet propertySet) {
		setPropertySet(propertySet, true);
	}
	
	public void setPropertySet(PropertySet propertySet, boolean refresh) {
		this.propertySet = propertySet;
		if (refresh) {
			refresh();
		}
	}
	
	/**
	 * Refreshes the {@link DisplayNameEditComposite} with the value
	 * from the {@link PropertySet} currently set.
	 */
	public void refresh() {
		if (getPropertySet() != null) {
			autoCreateDisplayName.setSelection(getPropertySet().isAutoGenerateDisplayName());
			if (getPropertySet().isAutoGenerateDisplayName()) {
				updatePropertySet();
			}
			if (getPropertySet().getDisplayName() != null) {
				displayName.setText(getPropertySet().getDisplayName());
			}
		}
		else {
			autoCreateDisplayName.setSelection(true);
		}
		displayName.getTextControl().setEnabled(!autoCreateDisplayName.getSelection());
	}
	
	public PropertySet getPropertySet() {
		return propertySet;
	}
	
	/**
	 * Updates the {@link PropertySet} with the values entered
	 * in this {@link DisplayNameEditComposite}.
	 */
	public void updatePropertySet() {
		updating = true;
		try {
			getPropertySet().setAutoGenerateDisplayName(autoCreateDisplayName.getSelection());
			getPropertySet().setDisplayName(displayName.getTextControl().getText(), StructLocalDAO.sharedInstance().getStructLocal(
					getPropertySet().getStructLocalObjectID(),
					//				Organisation.DEV_ORGANISATION_ID,
					//				Person.class, Person.STRUCT_SCOPE, structLocalScope,
					new NullProgressMonitor())
			);
		} finally {
			updating = false;
		}
		
	}
}
